
SET(CMAKE_COMMON_FLAGS "") # clear CMAKE_COMMON_FLAGS
SET(CMAKE_COMMON_FLAGS "-mcpu=cortex-m4")
SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -mthumb")
SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -mfpu=fpv4-sp-d16")
SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -mfloat-abi=softfp")

ADD_COMPILE_OPTIONS(-Wall)
ADD_COMPILE_OPTIONS(-Wextra)
ADD_COMPILE_OPTIONS(-Wno-unused-parameter)
ADD_COMPILE_OPTIONS(-Wno-missing-field-initializers)
ADD_COMPILE_OPTIONS(-fmessage-length=0)
ADD_COMPILE_OPTIONS(-fno-exceptions)
# ADD_COMPILE_OPTIONS(-fno-builtin) # Don’t recognize built-in functions that do not begin with ‘__builtin_’ as prefi.
ADD_COMPILE_OPTIONS(-ffunction-sections)
ADD_COMPILE_OPTIONS(-fdata-sections)
ADD_COMPILE_OPTIONS(-funsigned-char)
ADD_COMPILE_OPTIONS(-MMD)
ADD_COMPILE_OPTIONS(-fno-delete-null-pointer-checks)
ADD_COMPILE_OPTIONS(-fomit-frame-pointer)
ADD_COMPILE_OPTIONS(-O0)
ADD_COMPILE_OPTIONS(-g3)
#SET(CMAKE_COMMON_COMILE_FLAGS "${CMAKE_COMMON_COMILE_FLAGS} ${CMAKE_COMMON_FLAGS}")
ADD_COMPILE_OPTIONS(-include cmake/cmake_mbed_config.h)

SET(CMAKE_C_FLAGS "") # clear CMAKE_C_FLAGS
SET(CMAKE_C_STANDARD 11)
SET(CMAKE_C_STANDARD_REQUIRED ON)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu11")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_COMMON_FLAGS}")

SET(CMAKE_CXX_FLAGS "") # clear CMAKE_CXX_FLAGS
SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS ON) # switch between -std=c++1n and -std=gnu++1n.
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wvla")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive") # Downgrade some diagnostics about nonconformant code from errors to warnings. Thus, using -fpermissive will allow some nonconforming code to compile.
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_COMMON_FLAGS}")

SET(CMAKE_ASM_FLAGS "") # clear CMAKE_ASM_FLAGS
SET(CMAKE_ASM_FLAGS "-x assembler-with-cpp")
SET(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} ${CMAKE_COMMON_FLAGS}")

SET(COMMON_LINK_FLAGS "") # clear
SET(COMMON_LINK_FLAGS "-Wl,--gc-sections")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,main")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,_malloc_r")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,_free_r")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,_realloc_r")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,_memalign_r")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,_calloc_r")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,exit")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,--wrap,atexit")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -Wl,-n")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -mfloat-abi=softfp")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} ${CMAKE_COMMON_FLAGS}")
SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -DMBED_BOOT_STACK_SIZE=1024")
#SET(COMMON_LINK_FLAGS "${COMMON_LINK_FLAGS} -DXIP_ENABLE=0")

SET(MBED_LINK_LIBS "") # clear
SET(MBED_LINK_LIBS "-lstdc++")
SET(MBED_LINK_LIBS "${MBED_LINK_LIBS} -lsupc++")
SET(MBED_LINK_LIBS "${MBED_LINK_LIBS} -lm")
SET(MBED_LINK_LIBS "${MBED_LINK_LIBS} -lc")
SET(MBED_LINK_LIBS "${MBED_LINK_LIBS} -lgcc")
SET(MBED_LINK_LIBS "${MBED_LINK_LIBS} -lnosys")

SET(LD_SYS_LIBS "") # clear
SET(LD_SYS_LIBS "-Wl,--start-group")
SET(LD_SYS_LIBS "${LD_SYS_LIBS} ${MBED_LINK_LIBS}")
SET(LD_SYS_LIBS "${LD_SYS_LIBS} -Wl,--end-group")

SET(CMAKE_EXE_LINKER_FLAGS "")# clear
SET(CMAKE_SHARED_LINKER_FLAGS "")# clear
SET(CMAKE_MODULE_LINKER_FLAGS "")# clear
SET(CMAKE_CXX_LINK_FLAGS "")# clear
SET(CMAKE_C_LINK_FLAGS "")# clear
SET(CMAKE_SHARED_LIBRARY_CXX_FLAGS "")# clear
SET(CMAKE_SHARED_LIBRARY_C_FLAGS "")# clear

SET(PRE_LINK_FLAGS "") # clear PRE_LINK_FLAGS
SET(PRE_LINK_FLAGS "${PRE_LINK_FLAGS} -E")
SET(PRE_LINK_FLAGS "${PRE_LINK_FLAGS} -P")
SET(PRE_LINK_FLAGS "${PRE_LINK_FLAGS} ${COMMON_LINK_FLAGS}")

